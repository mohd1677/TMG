<?php

namespace TMG\Api\ApiBundle\Entity\Repository;

use TMG\Api\ApiBundle\Entity\Reputation;

/**
 * ReputationCustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReputationCustomerRepository extends \Doctrine\ORM\EntityRepository
{
    public function getStatsByDate($id, $start)
    {
        $start = new \DateTime($start);
        $total = $this->createQueryBuilder('rc')
            ->select(
                'COUNT(rc.id) AS customers',
                'r.lastUpload AS last_upload'
            )
            ->join('rc.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->andWhere('rc.sentDate >= :start')
            ->andWhere('rc.sentDate IS NOT NULL')
            ->setParameter('start', $start)
            ->getQuery()
            ->getResult();

        return $total;
    }

    public function getCountByProperty($id)
    {
        $total = $this->createQueryBuilder('rc')
            ->select('COUNT(rc.id)')
            ->join('rc.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleScalarResult();

        return $total;
    }

    public function getAllByProperty($id)
    {
        $total = $this->createQueryBuilder('rc')
            ->select(
                'rc.firstName',
                'rc.lastName',
                'rc.email',
                'rc.uploadDate',
                'rc.checkoutDate',
                'rc.status'
            )
            ->join('rc.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->orderBy('rc.checkoutDate', 'DESC')
            ->getQuery()
            ->getResult();

        return $total;
    }

    public function getLastUploadDate($reputation)
    {
        return $this->createQueryBuilder('rc')
            ->select(
                'rc.uploadDate'
            )
            ->where('rc.reputation = :reputationId')
            ->setParameter('reputationId', $reputation)
            ->orderBy('rc.uploadDate', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * Get lifetime totals for reputation
     *
     * @param  Reputation $reputation
     *
     * @return array
     */
    public function getLifetimeTotals(Reputation $reputation)
    {
        return $this->createQueryBuilder('rc')
            ->select('COUNT(rc.id) as customers')
            ->where('rc.reputation = :reputation')
            ->setParameter('reputation', $reputation)
            ->getQuery()
            ->getSingleResult();
    }
}
