<?php

namespace TMG\Api\ApiBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ReputationSiteDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReputationSiteDataRepository extends EntityRepository
{
    public function getSiteDataByProperty($id, $start)
    {
        $qb = $this->createQueryBuilder('rsd')
            ->select(
                'SUM(rsd.reviewCount) AS reviews',
                'AVG(rsd.averageRating) AS avg_rating',
                's.name'
            )
            ->join('rsd.reputation', 'r')
            ->join('rsd.site', 's')
            ->where('r.property = :id')
            ->setParameter('id', $id);

        if ($start) {
            $yrmo = new \DateTime($start);
            $yrmo = (int) $yrmo->format('ym');

            $qb->andWhere('rsd.lifetime IS NULL')
                ->andWhere('rsd.yrmo >= :yrmo')
                ->andWhere('rsd.yrmo IS NOT NULL')
                ->setParameter('yrmo', $yrmo);
        } else {
            $qb->andWhere('rsd.lifetime = :lt')
                ->setParameter('lt', 1);
        }

        return $qb->groupBy('rsd.site')
            ->getQuery()
            ->getResult();
    }

    public function getTripAdvisor($id, $siteId)
    {
        $qb = $this->createQueryBuilder('rsd')
            ->select(
                'rsd.yrmo',
                'rsd.reviewCount',
                'rsd.averageRating'
            )
            ->join('rsd.reputation', 'r')
            ->join('rsd.site', 's')
            ->where('r.property = :id')
            ->andWhere('s.id = :siteId')
            ->andWhere('rsd.lifetime IS NULL')
            ->setParameter('id', $id)
            ->setParameter('siteId', $siteId);


        return $qb->orderBy('rsd.yrmo', 'DESC')
            ->setMaxResults(12)
            ->getQuery()
            ->getResult();
    }

    public function getCompetitorTotalByProperty($propertyId, $siteIds)
    {
        return $this->createQueryBuilder('rsd')
            ->select('SUM(rsd.reviewCount)')
            ->join('rsd.reputation', 'r')
            ->join('rsd.site', 's')
            ->where('r.property = :id')
            ->andWhere('s.id IN (:siteIds)')
            ->andWhere('rsd.lifetime = :lifetime')
            ->setParameter('id', $propertyId)
            ->setParameter('siteIds', $siteIds)
            ->setParameter('lifetime', true)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
