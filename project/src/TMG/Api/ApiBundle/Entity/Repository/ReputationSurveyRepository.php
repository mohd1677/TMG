<?php

namespace TMG\Api\ApiBundle\Entity\Repository;

use TMG\Api\ApiBundle\Util\PagingInfo;

/**
 * ReputationSurveyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReputationSurveyRepository extends \Doctrine\ORM\EntityRepository
{
    public function findCountBy($by, PagingInfo $pagingInfo, $criteria = [])
    {
        $qb =  $this->createQueryBuilder('rs');
        $qb->select("count(rs.$by)")
            ->join('rs.reputation', 'r')
            ->join('r.property', 'p')
            ->where('p.hash = :hash');

        foreach ($criteria as $key => $value) {
            if ($key != "hash") {
                $qb->andWhere("rs.$key = :$key");
            }
        }

        if (!is_null($pagingInfo->getStart() && !is_null($pagingInfo->getEnd()))) {
            $qb->expr()->between('rs.createdDate', $pagingInfo->getStart(), $pagingInfo->getEnd());
        }

        $qb->setParameters($criteria);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $hash
     * @param PagingInfo $pagingInfo
     * @return array
     */
    public function findPropertySurveys($hash, PagingInfo $pagingInfo)
    {
        $class = 'rs.';
        if ($pagingInfo && !is_null($pagingInfo->getSortBy())) {
            if ($pagingInfo->getSortBy() === 'lastName' || $pagingInfo->getSortBy() == 'email') {
                $class = 'c.';
            } elseif ($pagingInfo->getSortBy() == 'name') {
                $class = 'rss.';
            }
        }

        $qb =  $this->createQueryBuilder('rs');
        $qb->select('rs')
            ->join('rs.reputation', 'r')
            ->join('r.property', 'p')
            ->join('rs.customer', 'c')
            ->join('rs.source', 'rss')
            ->where('p.hash = :hash');

        if ($pagingInfo && !is_null($pagingInfo->getSearch()) && !is_array($pagingInfo->getSearch())) {
            $qb->andWhere($qb->expr()->like('c.email', ':search'));
        }

        if ($pagingInfo && !is_null($pagingInfo->getStart() && !is_null($pagingInfo->getEnd()))) {
            $qb->expr()->between('rs.createdDate', $pagingInfo->getStart(), $pagingInfo->getEnd());
        }

        if ($pagingInfo && !is_null($pagingInfo->getSortBy())) {
            $qb->orderBy($class . $pagingInfo->getSortBy(), $pagingInfo->getOrder());
        }

        $qb->setParameter('hash', $hash);
        if ($pagingInfo && !is_null($pagingInfo->getSearch())) {
            $qb->setParameter('search', $pagingInfo->getSearch());
        }

        if ($pagingInfo) {
            $qb->setFirstResult($pagingInfo->getPage())
                ->setMaxResults($pagingInfo->getCount());
        }

        return $qb->getQuery()->getResult();

    }

    /**
     * @param $hash
     * @param PagingInfo $pagingInfo
     * @return mixed
     */
    public function findPropertySurveyTotal($hash, PagingInfo $pagingInfo)
    {
        $qb =  $this->createQueryBuilder('rs');
        $qb->select('count(rs.id)')
            ->join('rs.reputation', 'r')
            ->join('r.property', 'p')
            ->where('p.hash = :hash');

        if (!is_null($pagingInfo->getStart() && !is_null($pagingInfo->getEnd()))) {
            $qb->expr()->between('rs.createdDate', $pagingInfo->getStart(), $pagingInfo->getEnd());
        }

        $qb->setParameters(['hash' => $hash]);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
