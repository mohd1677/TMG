<?php

namespace TMG\Api\ApiBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use TMG\Api\ApiBundle\Entity\Reputation;

/**
 * ReputationEmailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReputationEmailRepository extends EntityRepository
{
    public function getStatsByDate($id, $start)
    {
        $yrmo = new DateTime($start);
        $yrmo = (int) $yrmo->format('ym');

        $total = $this->createQueryBuilder('re')
            ->select(
                'SUM(re.yes) AS yes_clicks',
                'SUM(re.no) AS no_clicks'
            )
            ->join('re.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->andWhere('re.yrmo >= :yrmo')
            ->andWhere('re.yrmo IS NOT NULL')
            ->setParameter('yrmo', $yrmo)
            ->getQuery()
            ->getResult();

        return $total;
    }

    public function getAllByPropertyAndDate($id, $start)
    {
        $yrmo = new DateTime($start);
        $yrmo = (int) $yrmo->format('ym');

        $total = $this->createQueryBuilder('re')
            ->select(
                're.yrmo',
                're.sent',
                're.opened',
                're.redirects'
            )
            ->join('re.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->andWhere('re.yrmo >= :yrmo')
            ->andWhere('re.yrmo IS NOT NULL')
            ->setParameter('yrmo', $yrmo)
            ->orderBy('re.yrmo', 'DESC')
            ->getQuery()
            ->getResult();

        return $total;
    }

    public function getAllByProperty($id)
    {
        $total = $this->createQueryBuilder('re')
            ->select(
                're.yrmo',
                're.sent',
                're.opened',
                're.redirects'
            )
            ->join('re.reputation', 'r')
            ->where('r.property = :id')
            ->setParameter('id', $id)
            ->orderBy('re.yrmo', 'DESC')
            ->getQuery()
            ->getResult();

        return $total;
    }

    /**
     * @param Reputation $reputation
     * @param DateTime $start
     * @param DateTime $end
     * @return int
     */
    public function findByReputationAndDate(Reputation $reputation, DateTime $start, DateTime $end)
    {
        $yrmoStart = (int) $start->format('ym');
        $yrmoEnd = (int) $end->format('ym');
        $total = $this->createQueryBuilder('re')
            ->select(
                'SUM(re.sent) AS total_sent'
            )
            ->where('re.reputation = :id')
            ->setParameter('id', $reputation->getId())
            ->andWhere('re.yrmo >= :yrmoStart')
            ->andWhere('re.yrmo <= :yrmoEnd')
            ->andWhere('re.yrmo IS NOT NULL')
            ->setParameter('yrmoStart', $yrmoStart)
            ->setParameter('yrmoEnd', $yrmoEnd)
            ->getQuery()
            ->getSingleScalarResult();

        return $total;
    }

    /**
     * Get lifetime totals
     *
     * @param  Reputation $reputation
     *
     * @return array
     */
    public function getLifetimeTotals(Reputation $reputation)
    {
        return $this->createQueryBuilder('re')
            ->select(
                'SUM(re.sent) as sent',
                'SUM(re.opened) as opened',
                'SUM(re.yes) as yes',
                'SUM(re.no) as no',
                'SUM(re.redirects) as redirects'
            )
            ->where('re.reputation = :reputation')
            ->setParameter('reputation', $reputation)
            ->getQuery()
            ->getSingleResult();
    }
}
